// Generated by https://quicktype.io
// contenedor de las peliculas
class Peliculas {
  // para tener un arreglo de las peleiculas mapeada
  List<Pelicula> items = new List(); 
  // contructor 1
  Peliculas(); 
  /// constructor con nombre:
  /// recibe como parametro una lista, mapea la lista y
  /// llena la variable items con todas las peliculas que
  /// contenga la lista 
  Peliculas.fromJsonList(List<dynamic> jsonList) {
    if ( jsonList == null ) return; // si esta vacio no hace nada
    
    for (var peli in jsonList) {
      // convierte peli en una instacia de pelicula
      final pelicula = new Pelicula.fromJsonMap(peli); 
      items.add(pelicula); // agregando a la lista de peliculas
    }
  }
}

class Pelicula {

  //creando un id unico para las animaciones de cada tarjeta
  String uniqueId; // propiedad inventada

  int voteCount;
  int id;
  bool video;
  double voteAverage;
  String title;
  double popularity;
  String posterPath;
  String originalLanguage;
  String originalTitle;
  List<int> genreIds; // lista de generos
  String backdropPath;
  bool adult;
  String overview;
  String releaseDate;

  Pelicula({
    this.voteCount,
    this.id,
    this.video,
    this.voteAverage,
    this.title,
    this.popularity,
    this.posterPath,
    this.originalLanguage,
    this.originalTitle,
    this.genreIds,
    this.backdropPath,
    this.adult,
    this.overview,
    this.releaseDate,
  });
  // este contructor lo llamare cuando quiero gerenerar una instacia de 
  // pelicula que viene con un formato Json, recibiria un Map que tiene 
  // como llave un String y como valor dynamic
  Pelicula.fromJsonMap( Map<String, dynamic> json ){
    // asignando cada valor del json a cada una de las propiedades del obj pelicula
    voteCount        = json['vote_count'];
    id               = json['id'];
    video            = json['video'];
    voteAverage      = json['vote_average'] / 1; // convirtiendo a double cuando llegue numero entero
    title            = json['title'];
    popularity       = json['popularity'] / 1;
    posterPath       = json['poster_path'];
    originalLanguage = json['original_language'];
    originalTitle    = json['original_title'];
    genreIds         = json['genre_ids'].cast<int>();
    backdropPath     = json['backdrop_path'];
    adult            = json['adult'];
    overview         = json['overview'];
    releaseDate      = json['release_date'];
  }

  getPosterImgPelic(){
    // en caso que no tenga imagen en el poster_path
    if (posterPath == null) {
      return 'https://cdn11.bigcommerce.com/s-hcp6qon/stencil/690c0e60-02fb-0137-adea-6f93f48f9be9/icons/icon-no-image.svg';
    } else {
      return 'https://image.tmdb.org/t/p/w500/$posterPath';
    }
  }
  getbackdropPathImg(){
    // en caso que no tenga imagen en el poster_path
    if (backdropPath == null) {
      return 'https://cdn11.bigcommerce.com/s-hcp6qon/stencil/690c0e60-02fb-0137-adea-6f93f48f9be9/icons/icon-no-image.svg';
    } else {
      return 'https://image.tmdb.org/t/p/w500/$backdropPath';
    }
  }

}


